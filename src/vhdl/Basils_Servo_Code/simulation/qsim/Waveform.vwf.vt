// Copyright (C) 2024  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/24/2025 10:09:56"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          line_sensor_servo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module line_sensor_servo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_50MHz;
reg line_sensor;
reg reset;
// wires                                               
wire led_out;
wire servo_pwm;

// assign statements (if any)                          
line_sensor_servo i1 (
// port map - connection between master ports and signals/registers   
	.clk_50MHz(clk_50MHz),
	.led_out(led_out),
	.line_sensor(line_sensor),
	.reset(reset),
	.servo_pwm(servo_pwm)
);
initial 
begin 
#1000000 $finish;
end 

// clk_50MHz
always
begin
	clk_50MHz = 1'b0;
	clk_50MHz = #20000 1'b1;
	#20000;
end 

// line_sensor
initial
begin
	repeat(12)
	begin
		line_sensor = 1'b0;
		line_sensor = #40000 1'b1;
		# 40000;
	end
	line_sensor = 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	# 100000;
	repeat(4)
	begin
		reset = 1'b0;
		reset = #100000 1'b1;
		# 100000;
	end
	reset = 1'b0;
end 
endmodule

