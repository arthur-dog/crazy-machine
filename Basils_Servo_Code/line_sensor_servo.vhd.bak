library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity line_sensor_servo is
    Port (
        clk_50MHz    : in  STD_LOGIC;     -- 50 MHz clock input
        reset        : in  STD_LOGIC;     -- Active-high reset
        line_sensor  : in  STD_LOGIC;     -- Line sensor input
        led_out      : out STD_LOGIC;     -- LED output
        servo_pwm    : out STD_LOGIC      -- PWM signal to servo
    );
end line_sensor_servo;

architecture Behavioral of line_sensor_servo is

    -- 50MHz clock → 20ms PWM = 1,000,000 clock cycles
    constant PWM_PERIOD : integer := 1000000;  -- 20ms period
    constant PULSE_0DEG : integer := 50000;    -- 1ms pulse (0°)
    constant PULSE_180DEG : integer := 100000; -- 2ms pulse (180°)

    signal pwm_counter : integer range 0 to PWM_PERIOD := 0;
    signal pulse_width : integer := PULSE_0DEG;
    signal pwm_signal  : std_logic := '0';

begin

    -- PWM generation
    process(clk_50MHz, reset)
    begin
        if reset = '1' then
            pwm_counter <= 0;
            pwm_signal <= '0';
        elsif rising_edge(clk_50MHz) then
            if pwm_counter < PWM_PERIOD then
                pwm_counter <= pwm_counter + 1;
            else
                pwm_counter <= 0;
            end if;

            if pwm_counter < pulse_width then
                pwm_signal <= '1';
            else
                pwm_signal <= '0';
            end if;
        end if;
    end process;

    -- Line sensor logic
    process(line_sensor)
    begin
        if line_sensor = '0' then  -- Line detected
            led_out <= '1';  -- Turn LED on
            pulse_width <= PULSE_0DEG;  -- Servo to 0°
        else
            led_out <= '0';  -- LED off
            pulse_width <= PULSE_180DEG;  -- Servo to 180°
        end if;
    end process;

    servo_pwm <= pwm_signal;

end Behavioral;
